generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                Int                 @id @default(autoincrement())
  nome              String
  email             String              @unique
  senha_hash        String
  telefone          String?
  perfil            String?
  tipo_cliente      String?
  empresa           String?
  avatar_url        String?             @map("avatar_url")
  curriculo_url     String?             @map("curriculo_url")
  created_at        DateTime            @default(now())
  status            String              @default("ativo")
  tipo              String              @default("cliente")
  updated_at        DateTime
  agendamentos      Agendamento[]
  resultados        ResultadoTeste[]
  testes_inteligencia TesteInteligencia[]

  @@map("usuarios")
}

model Teste {
  id            Int              @id @default(autoincrement())
  titulo        String
  descricao     String?
  ativo         Boolean          @default(true)
  criado_em     DateTime         @default(now()) @map("criado_em")
  atualizado_em DateTime         @updatedAt @map("atualizado_em")
  perguntas     Pergunta[]
  resultados    ResultadoTeste[]

  @@map("testes")
}

model Pergunta {
  id          Int        @id @default(autoincrement())
  teste_id    Int        @map("teste_id")
  pergunta    String
  tipo        String
  ordem       Int        @default(0)
  obrigatoria Boolean    @default(true)
  criado_em   DateTime   @default(now()) @map("criado_em")
  teste       Teste      @relation(fields: [teste_id], references: [id], onDelete: Cascade)
  respostas   Resposta[]

  @@map("perguntas")
}

model Resposta {
  id          Int      @id @default(autoincrement())
  pergunta_id Int      @map("pergunta_id")
  resposta    String
  correta     Boolean  @default(false)
  pontuacao   Int      @default(0)
  criado_em   DateTime @default(now()) @map("criado_em")
  pergunta    Pergunta @relation(fields: [pergunta_id], references: [id], onDelete: Cascade)

  @@map("respostas")
}

model ResultadoTeste {
  id              Int      @id @default(autoincrement())
  usuario_id      Int      @map("usuario_id")
  teste_id        Int      @map("teste_id")
  respostas       Json
  pontuacao_total Int      @default(0) @map("pontuacao_total")
  concluido       Boolean  @default(false)
  criado_em       DateTime @default(now()) @map("criado_em")
  atualizado_em   DateTime @updatedAt @map("atualizado_em")
  teste           Teste    @relation(fields: [teste_id], references: [id], onDelete: Cascade)
  usuario         Usuario  @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("resultados_teste")
}

model Agendamento {
  id              Int      @id @default(autoincrement())
  usuario_id      Int      @map("usuario_id")
  titulo          String
  descricao       String?
  data_hora       DateTime @map("data_hora")
  duracao_minutos Int      @default(60) @map("duracao_minutos")
  status          String   @default("agendado")
  tipo            String   @default("sessao")
  criado_em       DateTime @default(now()) @map("criado_em")
  atualizado_em   DateTime @updatedAt @map("atualizado_em")
  usuario         Usuario  @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("agendamentos")
}

// Modelos para Múltiplas Inteligências
model Categoria {
  id                       Int                     @id @default(autoincrement())
  nome                     String                  @unique
  descricao                String
  resultado                String                  // Texto grande descrevendo o resultado/características desta inteligência
  caracteristicas_inteligente String?              // Características específicas desta inteligência
  carreiras_associadas     String?                 // Carreiras e profissões associadas a esta inteligência
  cor                      String
  ativo                    Boolean                 @default(true)
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  perguntas                PerguntaInteligencia[]
  resultados               ResultadoInteligencia[]

  @@map("categorias_inteligencia")
}

model PerguntaInteligencia {
  id           Int                     @id @default(autoincrement())
  texto        String
  categoria_id Int
  tipo         String                  @default("multipla_escolha") // "multipla_escolha" ou "escala"
  ordem        Int                     @default(0)
  obrigatoria  Boolean                 @default(true)
  ativo        Boolean                 @default(true)
  created_at   DateTime                @default(now())
  updated_at   DateTime                @updatedAt
  categoria    Categoria               @relation(fields: [categoria_id], references: [id], onDelete: Cascade)
  possibilidades PossibilidadeResposta[]
  respostas    RespostaInteligencia[]

  @@map("perguntas_inteligencia")
}

model PossibilidadeResposta {
  id         Int                     @id @default(autoincrement())
  pergunta_id Int?                   // Nullable para possibilidades globais
  texto      String
  valor      Int
  descricao  String
  ordem      Int                     @default(0)
  ativo      Boolean                 @default(true)
  created_at DateTime                @default(now())
  updated_at DateTime                @updatedAt
  pergunta   PerguntaInteligencia?   @relation(fields: [pergunta_id], references: [id], onDelete: Cascade)
  respostas  RespostaInteligencia[]

  @@map("possibilidades_resposta")
}

model RespostaInteligencia {
  id                      Int                  @id @default(autoincrement())
  teste_realizado_id      Int
  pergunta_id             Int
  possibilidade_id        Int
  created_at              DateTime             @default(now())
  teste_realizado         TesteInteligencia    @relation(fields: [teste_realizado_id], references: [id], onDelete: Cascade)
  pergunta                PerguntaInteligencia @relation(fields: [pergunta_id], references: [id], onDelete: Cascade)
  possibilidade           PossibilidadeResposta @relation(fields: [possibilidade_id], references: [id], onDelete: Cascade)

  @@map("respostas_inteligencia")
}

model TesteInteligencia {
  id                 Int                     @id @default(autoincrement())
  usuario_id         Int
  nome_usuario       String?
  email_usuario      String?
  concluido          Boolean                 @default(false)
  tempo_resposta     Int?                    // em minutos
  pontuacao_total    Int                     @default(0)
  inteligencia_dominante String?
  created_at         DateTime                @default(now())
  updated_at         DateTime                @updatedAt
  autorizado        Boolean             @default(false)
  usuario           Usuario             @relation(fields: [usuario_id], references: [id])
  respostas          RespostaInteligencia[]
  resultados         ResultadoInteligencia[]

  @@map("testes_inteligencia")
}

model ResultadoInteligencia {
  id           Int               @id @default(autoincrement())
  teste_id     Int
  categoria_id Int
  pontuacao    Int               @default(0)
  percentual   Float             @default(0)
  aprovado     Boolean           @default(false)
  created_at   DateTime          @default(now())
  teste        TesteInteligencia @relation(fields: [teste_id], references: [id], onDelete: Cascade)
  categoria    Categoria         @relation(fields: [categoria_id], references: [id], onDelete: Cascade)

  @@map("resultados_inteligencia")
}

model ConfiguracaoTeste {
  id                   Int      @id @default(autoincrement())
  teste_ativo          Boolean  @default(false)
  tempo_limite         Int      @default(30) // em minutos
  mostrar_progresso    Boolean  @default(true)
  permitir_voltar      Boolean  @default(false)
  randomizar_perguntas Boolean  @default(false)
  randomizar_opcoes    Boolean  @default(false)
  pontuacao_minima     Int      @default(0)
  pontuacao_maxima     Int      @default(100)
  mensagem_inicio      String
  mensagem_fim         String
  instrucoes           String
  tema_cores           String   @default("azul")
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("configuracao_teste")
}
